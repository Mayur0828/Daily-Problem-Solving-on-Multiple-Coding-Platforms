Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0

Constraints:
1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104

JAVA CODE:
class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        // Bruteforce
        // int n = nums.length;
        // int result = 0;
        // for(int i=0; i<n; i++){
        //     int sum =0;
        //     for(int j=i; j<n; j++){
        //         sum+= nums[j];
        //         if(sum % k == 0){
        //                 result ++;
        //             }
        //     }
        // }
        // return result;


        //Best one : by using Hashmap

        HashMap<Integer,Integer> map = new HashMap<>();
        int sum =0;
        int remainder =0;
        int n = nums.length;
        int result = 0;
        map.put(0,1);
        int i=0;
        while(i<n){
            sum += nums[i];
            remainder = sum % k;
            if(remainder < 0){
                remainder = remainder + k;
            }

            if(map.containsKey(remainder)){
                result += map.get(remainder);
                map.put(remainder,map.get(remainder)+1);
            }
            else{
                map.put(remainder,1);
            }
            i++;
        }
        return result;
    }
}
