Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.

Sort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.

 

Example 1:

Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]
Example 2:

Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]
Output: [22,28,8,6,17,44]
 

Constraints:

1 <= arr1.length, arr2.length <= 1000
0 <= arr1[i], arr2[i] <= 1000
All the elements of arr2 are distinct.
Each arr2[i] is in arr1.

JAVA CODE:

import java.util.*;

class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        Map<Integer, Integer> map = new LinkedHashMap<>();
        int n1 = arr1.length;
        int n2 = arr2.length;

        // Entering elements of array1 to the map and maintaining their count
        for (int i = 0; i < n1; i++) {
            map.put(arr1[i], map.getOrDefault(arr1[i], 0) + 1);
        }

        // Result array to store sorted elements
        int[] result = new int[n1];
        int index = 0;

        // Traverse arr2 and copy the elements from the map
        for (int i = 0; i < n2; i++) {
            int key = arr2[i];
            if (map.containsKey(key)) {
                int count = map.get(key);
                while (count > 0) {
                    result[index++] = key;
                    count--;
                }
                map.remove(key);
            }
        }

        // Add remaining elements in sorted order
        List<Integer> remaining = new ArrayList<>();
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            int key = entry.getKey();
            int count = entry.getValue();
            while (count > 0) {
                remaining.add(key);
                count--;
            }
        }

        Collections.sort(remaining);
        for (int num : remaining) {
            result[index++] = num;
        }

        return result;
    }
}
